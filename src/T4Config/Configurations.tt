<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System" #>
<#@ Assembly Name="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#   
	if (string.IsNullOrEmpty(GetConfigPath())) 
	{
		return String.Empty; 
    }

	var namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");

	KeyValueConfigurationElement[] settings = GetSettings();	
	ConnectionStringSettingsCollection connectionStrings = GetConnectionStrings();
#>
using System;
using System.Configuration;

namespace <#= namespaceName #>
{
	public interface IConfigurations
	{
<#  foreach(KeyValueConfigurationElement setting in settings) { #>
		<#= GetTypeString(setting.Value) #> <#= setting.Key #> { get; }
<# } #>
	}

	public class Configurations : IConfigurations
	{
<#  foreach(KeyValueConfigurationElement setting in settings) { #>
<#
	var type = GetTypeString(setting.Value);
	var lazyType = string.Concat("Lazy<", type, ">");
#>
		private static readonly <#= lazyType #> _<#= setting.Key #> = new <#= lazyType #>(() => {
	<# if(type == "Guid") { #>
			return new Guid(ConfigurationManager.AppSettings["<#= setting.Key #>"]);
	<# } else if(type == "int") { #>
			return Convert.ToInt32(ConfigurationManager.AppSettings["<#= setting.Key #>"]);
	<# } else { #>
			return ConfigurationManager.AppSettings["<#= setting.Key #>"];
	<# } #>
	});
<# } #>

<#  foreach(KeyValueConfigurationElement setting in settings) { #>
<#  var type = GetTypeString(setting.Value); #>
		public virtual <#= type #> <#= setting.Key #> 
		{
			get 
			{
				return _<#= setting.Key #>.Value;
			}
		}
<# } #>
	}

<# if(connectionStrings.Count > 0) { #>
	public interface IConnectionStrings
	{
<#  foreach(ConnectionStringSettings  setting in connectionStrings) { #>
		string <#= setting.Name #> { get; }
<# } #>
	}

	public class ConnectionStrings : IConnectionStrings
	{
<#  foreach(ConnectionStringSettings setting in connectionStrings) { #>
		private static readonly Lazy<string> _<#= setting.Name #> = new Lazy<string>(() => ConfigurationManager.ConnectionStrings["<#= setting.Name #>"].ConnectionString);
<# } #>

<#  foreach(ConnectionStringSettings setting in connectionStrings) { #>
		public virtual string <#= setting.Name #> 
		{
			get 
			{
				return _<#= setting.Name #>.Value;
			}
		}
<# } #>
	}
<# } #>
}

<#+

public KeyValueConfigurationElement[] GetSettings()
{
	return GetConfiguration().AppSettings.Settings.Cast<KeyValueConfigurationElement>()
			.Where(x => Regex.IsMatch(x.Key, @"^[A-z][A-z0-9]+$"))
			.ToArray(); 
}

public ConnectionStringSettingsCollection GetConnectionStrings()
{
	return GetConfiguration().ConnectionStrings.ConnectionStrings;
}

public Configuration GetConfiguration()
{

	ExeConfigurationFileMap configFile = new ExeConfigurationFileMap(); 
	configFile.ExeConfigFilename = GetConfigPath(); 
	if (string.IsNullOrEmpty(configFile.ExeConfigFilename)) 
		throw new ArgumentNullException("The project does not contain App.config or Web.config file."); 
	
	return ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);

	
}

public string GetTypeString(object value)
{
	Guid guid;
	if( Guid.TryParse(value.ToString(), out guid))
    {
		return "Guid";
    }

	int i;
	if(int.TryParse(value.ToString(), out i))
	{
		return "int";
    }

	return "string";
}

public EnvDTE.Project GetCurrentProject()
{
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    if (serviceProvider == null)
    {
		throw new Exception("Host property returned unexpected value (null)");
    }

    EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
    if (dte == null)
    {
		throw new Exception("Unable to retrieve EnvDTE.DTE");
    }

    Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
    if (activeSolutionProjects == null)
    {
		throw new Exception("DTE.ActiveSolutionProjects returned null");
    }

    EnvDTE.Project project = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
    if (project == null)
    {
		throw new Exception("DTE.ActiveSolutionProjects[0] returned null");
    }

    return project;
}


private string GetProjectPath()
{
    EnvDTE.Project project = GetCurrentProject();
    System.IO.FileInfo fileInfo = new System.IO.FileInfo(project.FullName);
    return fileInfo.Directory.FullName;
}

private string GetConfigPath()
{
    EnvDTE.Project project = GetCurrentProject();
    foreach (EnvDTE.ProjectItem projectItem in project.ProjectItems)
    {
        if (projectItem.Name.Equals("App.config", StringComparison.InvariantCultureIgnoreCase) || projectItem.Name.Equals("Web.config", StringComparison.InvariantCultureIgnoreCase))
		{
			return System.IO.Path.Combine(GetProjectPath(), projectItem.Name);
        }
    }
    return string.Empty;
}

#>
